#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 07, 2018 08:48:37 PM JST  platform: Windows NT

import edctclass
from utils import strlist
import os
import sys
from tkinter.filedialog import askopenfilename
from tkinter import messagebox

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    
def set_Tk_var():
    global TraitList
    TraitList = StringVar()
    global traitsearched
    traitsearched = StringVar()
    global triggersearched
    triggersearched = StringVar()
    global TriggerList
    TriggerList = StringVar()

def OpenFile():
    wfix(w.TraitSearchEntry)
    wfix(w.TraitGoToPrev)
    wfix(w.TraitGoToNext)
    wfix(w.AddTrait)
    wfix(w.HideTrait)
    wfix(w.FindAllTrait)
    wfix(w.ReloadTraitList)
    w.TraitListt.place(anchor=N)
    
    print('traitedit_support.OpenFile')
    filename = askopenfilename()
    if(not filename):
        print("ERROR: please choose a file")
        return
    if(not os.path.isfile(filename)):
        print("ERROR: file not found")
        return
    alcib.parse_edct(filename)
    TraitList.set(alcib.traits.names)
    TriggerList.set(alcib.triggers.names)
    w.Viewer.delete('1.0', END)
    afterparse()
    sys.stdout.flush()

def SaveFile():
    print('traitedit_support.SaveFile')
    sys.stdout.flush()

def SaveFileAs():
    print('traitedit_support.SaveFileAs')
    sys.stdout.flush()

def FilterWin():
    print('traitedit_support.FilterWin')
    sys.stdout.flush()

def ValidateFile():
    print('traitedit_support.ValidateFile')
    sys.stdout.flush()

def Quit():
    print('traitedit_support.Quit')
    sys.stdout.flush()
    destroy_window()

def ReloadFile():
    print('traitedit_support.ReloadFile')
    alcib.reload()
    TraitList.set(alcib.traits.names)
    TriggerList.set(alcib.triggers.names)
    w.Viewer.delete('1.0', END)
    afterparse()
    sys.stdout.flush()

def AddTrait():
    print('traitedit_support.AddTrait')
    add_traits(clear=False)
    sys.stdout.flush()

def FindAllTraits():
    print('traitedit_support.FindAllTraits')
    sys.stdout.flush()

def HideTrait():
    print('traitedit_support.HideTrait')
    sys.stdout.flush()

def ReloadTraitList():
    print('traitedit_support.ReloadTraitList')
    sys.stdout.flush()

def ReloadEdit():
    print('traitedit_support.ReloadEdit')
    sys.stdout.flush()

def SaveEdit():
    print('traitedit_support.SaveEdit')
    sys.stdout.flush()

def ValidEdit():
    print('traitedit_support.ValidEdit')
    print(w.TraitSearchEntry.place_info())
    #w.TraitSearchEntry.place_forget()
    #w.TraitSearchEntry.place(x=5, y=50, height=26, width=162, bordermode='ignore')
    wfix(w.TraitSearchEntry)
    print(w.TraitSearchEntry.winfo_x())
    print(w.TraitSearchEntry.winfo_y())
    print(w.TraitSearchEntry.winfo_width())
    print(w.TraitSearchEntry.winfo_height())
    print(w.TraitSearchEntry.place_info())
    sys.stdout.flush()

def ClearEdit():
    print('traitedit_support.ClearEdit')
    print("was text modified?", w.Viewer.edit_modified())
    if(w.Viewer.edit_modified()):
        savebol=messagebox.askyesnocancel("Save workspace?", "Save changes before changing workspace?", default=messagebox.CANCEL)
        if(savebol==True): SaveEdit()
        elif(savebol==False): pass

    w.Viewer.delete('1.0', END)
    alcib.current_view = strlist()
    w.Viewer.edit_modified(False)
    w.Viewer.edit_reset()
    
    sys.stdout.flush()

def ExportEdit():
    print('traitedit_support.ExportEdit')
    sys.stdout.flush()

def ImportEdit():
    print('traitedit_support.ImportEdit')
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    
    if sys.platform == "win32":
        w.style.theme_use('vista')
    w.TraitListt.bind('<Double-1>', lambda x: add_traits(clear=False))
    w.TraitListt.config(selectmode=EXTENDED)
    w.Viewer.config(undo=True)
              
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

global alcib
alcib = edctclass.EDCT()

def add_traits(clear = True):
    sel = w.TraitListt.curselection()
    print("selection:", sel)
    strat = [w.TraitListt.get(s) for s in sel]
    print("traits:", strat)
    if(clear):
        # Clear Workspace
        ClearEdit()
    
    #alcib.current_view = strlist()    
    for tt in strat:
        seltrait = alcib.get_trait(tt)
        if(seltrait in alcib.current_view):
            print("WARN: Trait {:s} already present".format(seltrait.name))
            continue
        w.Viewer.insert(END, seltrait.as_string())
        alcib.current_view.append(seltrait)
        
    w.Viewer.edit_modified(False)
    w.Viewer.edit_reset()
    
def changeview():
    messagebox.askyesnocancel("Save workspace?", "Save changes before changing workspace?", default=messagebox.CANCEL)
    
def afterparse():
    if(not (alcib.traits.N + alcib.triggers.N)):
        messagebox.showwarning("Parsing completed", "No triggers or traits found\n\n Please check your file\n({:s})".format(os.path.basename(alcib.edct_file)))
    else:
        messagebox.showinfo("Parsing completed", "File: {:s}\nFound:\n  {:d} traits\n  {:d} triggers".format(os.path.basename(alcib.edct_file), alcib.traits.N, alcib.triggers.N))

def wfix(wid):
    wx=wid.winfo_x()
    wy=wid.winfo_y()
    ww=wid.winfo_width()
    wh=wid.winfo_height()
    wid.place_forget()
    print(wx, wy, wh, ww)
    wid.place(x=wx, y=wy, height=wh, width=ww, bordermode='ignore')
    

if __name__ == '__main__':
    import traitedit
    traitedit.vp_start_gui()




















