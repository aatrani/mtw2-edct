#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 07, 2018 08:48:37 PM JST  platform: Windows NT
#    Oct 07, 2018 11:29:04 PM JST  platform: Windows NT
#    Oct 07, 2018 11:52:37 PM JST  platform: Windows NT
#    Oct 08, 2018 10:34:34 PM JST  platform: Windows NT

import traitclass
import os
import sys
from tkinter.filedialog import askopenfilename
from tkinter import messagebox

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

    
def set_Tk_var():
    global TraitList
    TraitList = StringVar()
    global traitsearched
    traitsearched = StringVar()
    global triggersearched
    triggersearched = StringVar()
    global TriggerList
    TriggerList = StringVar()

def QueryTrait():
    print('traitedit_support.QueryTrait')
    sys.stdout.flush()

def ReloadEdit():
    print('traitedit_support.ReloadEdit')
    sys.stdout.flush()

def SaveEdit():
    print('traitedit_support.SaveEdit')
    sys.stdout.flush()

def ValidEdit():
    print('traitedit_support.ValidEdit')
    sys.stdout.flush()

def FilterTrait():
    print('traitedit_support.FilterTrait')
    sys.stdout.flush()

def GoToTrait():
    print('traitedit_support.GoToTrait')
    sys.stdout.flush()

def OpenFile():
    print('traitedit_support.OpenFile')
    filename = askopenfilename()
    if(not filename):
        print("ERROR: please choose a file")
        return
    if(not os.path.isfile(filename)):
        print("ERROR: file not found")
        return
    traitmod.parse_edct(filename)
    TraitList.set(traitmod.traits.names)
    TriggerList.set(traitmod.triggers.names)
    w.Viewer.delete('1.0', END)
    afterparse()
    sys.stdout.flush()
    
    # Viewer
    #w.Viewer.insert(INSERT, traitmod.traits[0].as_string())
    #traitmod.current_view = traitmod.traits[0].name
    #w.Viewer.edit_modified(False)

def Quit():
    print('traitedit_support.Quit')
    sys.stdout.flush()
    destroy_window()

def ReloadFile():
    print('traitedit_support.ReloadFile')
    traitmod.reload()
    TraitList.set(traitmod.traits.names)
    TriggerList.set(traitmod.triggers.names)
    w.Viewer.delete('1.0', END)
    afterparse()
    sys.stdout.flush()
    # Viewer
    #w.Viewer.insert(INSERT, traitmod.traits[0].as_string())
    #traitmod.current_view = traitmod.traits[0].name
    #w.Viewer.edit_modified(False)
    
def SaveAs():
    print('traitedit_support.SaveAs')
    sys.stdout.flush()

def Valid():
    print('traitedit_support.Valid')
    sys.stdout.flush()

def ViewTrait():
    print('traitedit_support.ViewTrait')
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    w.TraitListt.bind('<Double-1>', lambda x: select_trait())

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

global traitmod
traitmod = traitclass.EDCT()

def select_trait():
    sel = w.TraitListt.curselection()
    print("sel:", sel)
    trat = w.TraitListt.get(sel)
    print("trait:", trat)
    if(traitmod.current_view):
        # Viewer
        print("check if text was modified")
        print(w.Viewer.edit_modified())
        w.Viewer.delete('1.0', END)
    seltrait = traitmod.get_trait(trat)
    w.Viewer.insert(INSERT, seltrait.as_string())
    traitmod.current_view = seltrait.name
    w.Viewer.edit_modified(False)

def afterparse():
    if(not (traitmod.traits.N + traitmod.triggers.N)):
        messagebox.showwarning("Warning", "No triggers or traits found\n\nCheck the file {:s}".format(os.path.basename(traitmod.edct_file)))
    else:
        messagebox.showinfo("File loaded: {:s}".format(os.path.basename(traitmod.edct_file)), "Found:\n  {:d} traits\n  {:d} triggers".format(traitmod.traits.N, traitmod.triggers.N))
    

if __name__ == '__main__':
    import traitedit
    traitedit.vp_start_gui()











